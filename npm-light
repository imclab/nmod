#!/usr/bin/env node

/**
 * Fetch content of a url
*/
var fetchUrl	= function(urlStr, dataCb, errorCb){
	dataCb	= dataCb || function(data){}
	errorCb	= errorCb || function(error){}
	var url	= require('url').parse(urlStr);
	var data= "";
	var options = {
		host	: url.hostname,
		port	: (url.port||80),
		path	: url.pathname
	};
	console.log("fetching", urlStr)
	var req	= require('http').request(options, function(res) {
		//console.log('STATUS: ' + res.statusCode);
		//console.log('HEADERS: ' + JSON.stringify(res.headers));
		res.setEncoding('binary');
		res.on('data', function(chunk){
			//console.log('BODY: ' + chunk);
			data += chunk;
		});
		res.on('end', function(){
			dataCb(data);
		});
	});
	req.end();
	req.on('error', errorCb);
}

var getTarballUrl	= function(pkgName, successCb, failureCb){
	successCb	= successCb || function(url){};
	failureCb	= failureCb || function(error){console.log("error", error); console.assert(false);}
	var version	= "latest";	// TODO make this tunable
	var pkgJsonUrl	= "http://registry.npmjs.org/"+pkgName+"/"+version;
	fetchUrl(pkgJsonUrl, function(dataJson){
		var data	= JSON.parse(dataJson)
		successCb(data.dist.tarball)
	}, function(error){
		failureCb(error);
	})	
}


var untarData	= function(data, dstDirName, successCb, failureCb){
	successCb	= successCb || function(){};
	failureCb	= failureCb || function(error){console.log("error", error); console.assert(false);}
	var tmpName	= "/tmp/npm-light-"+Math.floor(Math.random()*999999).toString(36)+".tgz"
	require('fs').writeFileSync(tmpName, data, "binary")

	var cmdline	= "tar"
	var cmdArgs	= ["-C", dstDirName, "-zxf", tmpName];
	var spawn	= require('child_process').spawn(cmdline, cmdArgs);
	spawn.on('exit', function(exitStatus){
		if( exitStatus == 0 )	successCb()
		else			failureCb(exitStatus);
		require('fs').unlinkSync(tmpName);	
	})
}

var pkgName	= "underscore";
getTarballUrl(pkgName, function(tarUrl){
	console.log("tarUrl", tarUrl);
	fetchUrl(tarUrl, function(tarData){
		var tmpDirname	= "./node_modules/.tmp/";
		untarData(tarData, tmpDirname, function(){
			console.log("untar succeed")
		})
	})
}, function(error){
	console.log("error", error)
	console.assert(false);
});

//var tarballUrl	= "http://registry.npmjs.org/express/-/express-1.0.7.tgz";
//fetchUrl(tarballUrl, function(data){
//	console.log("data len", data.length)
//	untarData(data, "/tmp")
//}, function(error){
//	console.log("error", error)
//	console.assert(false);
//})
//
